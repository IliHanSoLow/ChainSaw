thing: complex {
    real: num,
    imaginary: num,
}

$complex { me.real = 0; me.imaginary = 0; }
$complex(real: num, imaginary: num) { me.real = real; me.imaginary = imaginary; }

@(+=):complex(z: complex): complex {
    me.real += z.real;
    me.imaginary += z.imaginary;
    ret me;
}

@(-=):complex(z: complex): complex {
    me.real -= z.real;
    me.imaginary -= z.imaginary;
    ret me;
}

@(*=):complex(z: complex): complex {
    num real = me.real * z.real - me.imaginary * z.imaginary;
    num imaginary = me.real * z.imaginary + me.imaginary * z.real;

    me.real = real;
    me.imaginary = imaginary;

    ret me;
}

@(/=):complex(z: complex): complex {
    me *= z.conjugate();
    num div = 1 / pow(z.mod(), 2);

    me.real *= div;
    me.imaginary *= div;

    ret me;
}

@(+)(z1: complex, z2: complex): complex {
    ret complex(z1.real + z2.real, z1.imaginary + z2.imaginary);
}

@(-)(z1: complex, z2: complex): complex {
    ret complex(z1.real - z2.real, z1.imaginary - z2.imaginary);
}

@(*)(z1: complex, z2: complex): complex {
    num real = z1.real * z2.real - z1.imaginary * z2.imaginary;
    num imaginary = z1.real * z2.imaginary + z1.imaginary * z2.real;

    ret complex(real, imaginary);
}

@(/)(z1: complex, z2: complex): complex {
    complex res = z1 * z2.conjugate();
    num div = 1 / pow(z2.mod(), 2);

    ret complex(res.real * div, res.imaginary * div);
}

@conjugate:complex: complex {
    ret complex(me.real, -me.imaginary);
}

@mod:complex: num {
    ret sqrt(pow(me.real, 2) + pow(me.imaginary, 2));
}

@square:complex: complex {
    num real = me.real * me.real - me.imaginary * me.imaginary;
    num imaginary = 2 * me.real * me.imaginary;
    ret complex(real, imaginary);
}

$str(c: complex) {
	me = format("{} {}{}i", c.real, (c.imaginary < 0 ? "" : "+ "), c.imaginary);
}

@exp(z: complex): complex {
    num a = z.real;
    num b = z.imaginary;
    num r = exp(a);
    a = r * cos(b);
    b = r * sin(b);
    ret complex(a, b);
}

@sin(z: complex): complex {
    num x = exp(z.imaginary);
    num x_inv = 1 / x;
    num r = sin(z.real) * (x + x_inv) / 2;
    num i = cos(z.real) * (x - x_inv) / 2;
    ret complex(r, i);
}

@cos(z: complex): complex {
    num x = exp(z.imaginary);
    num x_inv = 1 / x;
    num r = cos(z.real) * (x + x_inv) / 2;
    num i = -sin(z.real) * (x - x_inv) / 2;
    ret complex(r, i);
}

@tan(z: complex): complex {
    ret sin(z) / cos(z);
}

@cot(z: complex): complex {
    ret complex(1, 0) / tan(z);
}

@sec(z: complex): complex {
    ret complex(1, 0) / cos(z);
}

@cosec(z: complex): complex {
    ret complex(1, 0) / sin(z);
}

@arg:complex: num {
    ret atan2(me.imaginary, me.real);
}

@inverse:complex: complex {
    ret complex(1, 0) / me;
}

@abs:complex: num {
    ret sqrt(me.real * me.real + me.imaginary * me.imaginary);
}
