\inc "complex.csaw"

MAX_ITER: int32 =    10;
SAMPLES:  int32 =     1;
WIDTH:    int32 =    10;
HEIGHT:   int32 = WIDTH;

@main::num {

    xc:   flt64 = [flt64]  readf("xc: ");	## -0.5
    yc:   flt64 = [flt64]  readf("yc: ");	##    0
    size: int32 = [int32]readf("size: ");	##    2

    output: img = img(WIDTH, HEIGHT);

    j: int32;
    i: int32;
    n: int32;
    s: int32;
    x0: flt64;
    y0: flt64;
    z0: complex;
    grey: int32;
	
    for (j = 0; j < HEIGHT; ++j) {
        for (i = 0; i < WIDTH; ++i) {
            n = 0;
            for (s = 0; s < SAMPLES; ++s) {
				x0 = xc - size / 2 + size * (i + random()) /  WIDTH;
                y0 = yc - size / 2 + size * (j + random()) / HEIGHT;
                z0 = complex(x0, y0);
                n += mandel(z0, MAX_ITER);
            }
            grey = [int32](255.999 * [flt64]n / [flt64](SAMPLES * MAX_ITER));
            output.set(i, j, (0xff << 24) | (grey << 16) | (grey << 8) | grey);
        }
		printf("\n");
    }
	
    output.write("png", "mandel.png");
    ret 0;
}

@mandel(z0: complex, max: int32): int32 {
    z: complex = z0;
	t: int32;
    for (t = 0; (t < max) && (z.abs() <= 2); ++t)
        z = z.square() + z0;
    ret t;
}
