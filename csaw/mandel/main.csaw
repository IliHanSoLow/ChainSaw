\inc "std/stdio.csaw"
\inc "std/stdlib.csaw"
\inc "std/stdimg.csaw"

\inc "complex.csaw"

MAX_ITER: int32 = 100;
SAMPLES:  int32 = 100;

@strcmp(str1: int8*, str2: int8*): int32;

@random::flt64 = rand() / (RAND_MAX + 1.0);

@mandel(z0: complex, max: int32): int32 {
    z: complex = z0;
	t: int32;
    for (t = 0; (t < max) && (z.abs() <= 2); ++t)
        z = z.square() + z0;
    ret t;
}

@main(argc: int32, argv: int8**): int32 {

    xc:     flt64;
    yc:     flt64;
    size:   int32;
    width:  int32;
    height: int32;

    printf("xc: ");
    scanf("%lf", &xc);  ## -0.5
    printf("yc: ");
    scanf("%lf", &yc);  ##    0
    printf("size: ");
    scanf("%d", &size); ##    2

    printf("width: ");
    scanf("%d", &width);
    printf("height: ");
    scanf("%d", &height);

    printf("Rendering with xc=%f yc=%f size=%d width=%d height=%d\n", xc, yc, size, width, height);

    submit: int8* = [int8*]malloc([int64]2);
    printf("Start? ([y]|n) ");
    scanf("%1s", submit);
    submit[1] = '\x00';
    if (strcmp(submit, "y") != 0)
        ret 1;

    out: image = image(width, height);

    for (j: int32; j < out.height; ++j) {
        for (i: int32; i < out.width; ++i) {
            n: int32 = 0;
            for (s: int32; s < SAMPLES; ++s) {
				x0: flt64 = xc - size / 2 + size * (i + random()) /  out.width;
                y0: flt64 = yc - size / 2 + size * (j + random()) / out.height;
                z0: complex = complex(x0, y0);
                n += mandel(z0, MAX_ITER);
            }
            grey: int32 = [int32](255.999 * n / (SAMPLES * MAX_ITER));
            out.pixel(i, j, 0xff << 24 | (grey & 0xff) << 16 | (grey & 0xff) << 8 | (grey & 0xff));
        }
    }

    printf("C");

    out.toppm("mandel.ppm");
    out.destroy();

    ret 0;
}
