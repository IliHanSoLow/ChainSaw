def material {
    type: int8
}

def lambertian {
    type: int8,
    albedo: color
} ## size: 1 + 3 * 8 = 25

$lambertian(albedo: color) {
    me!type = 'L';
    me!albedo = albedo;
}

@(=):lambertian(l: lambertian): lambertian* {
    me!type = l.type;
    me!albedo = l.albedo;
    ret me;
}

@scatter:lambertian(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    scatter_direction: vec3 = rec.normal + random_unit_vector();

    ## Catch degenerate scatter direction
    if (scatter_direction.near_zero())
        scatter_direction = rec.normal;

    scattered = ray(rec.p, scatter_direction, r_in.t);
    attenuation = me!albedo;
    ret true;
}

def metal {
    type: int8,
    albedo: color,
    fuzz: flt64
} ## size: 1 + 3 * 8 + 8 = 33

$metal(albedo: color, fuzz: flt64) {
    me!type = 'M';
    me!albedo = albedo;
    me!fuzz = fuzz < 1 ? fuzz : 1.0;
}

@(=):metal(m: metal): metal* {
    me!type = m.type;
    me!albedo = m.albedo;
    me!fuzz = m.fuzz;
    ret me;
}

@scatter:metal(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    reflected: vec3 = reflect(r_in.direction, rec.normal);
    reflected = unit_vector(reflected) + (me!fuzz * random_unit_vector());
    scattered = ray(rec.p, reflected, r_in.t);
    attenuation = me!albedo;
    ret dot(scattered!direction, rec.normal) > 0;
}

def dielectric {
    type: int8,
    ## Refractive index in vacuum or air, or the ratio of the material's refractive index over
    ## the refractive index of the enclosing media
    refraction_index: flt64
} ## size: 1 + 8 = 9

$dielectric(refraction_index: flt64) {
    me!type = 'D';
    me!refraction_index = refraction_index;
}

@(=):dielectric(d: dielectric): dielectric* {
    me!type = d.type;
    me!refraction_index = d.refraction_index;
    ret me;
}

@reflectance(cosine: flt64, refraction_index: flt64): flt64 {
    ## Use Schlick's approximation for reflectance.
    r0: flt64 = (1 - refraction_index) / (1 + refraction_index);
    r0 *= r0;
    ret r0 + (1 - r0) * pow(1 - cosine, 5.0);
}

@scatter:dielectric(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    attenuation = vec3(1.0, 1.0, 1.0);
    ri: flt64 = me!refraction_index;
    if (rec.front_face) ri = 1.0 / ri;

    unit_direction: vec3 = unit_vector(r_in.direction);
    cos_theta: flt64 = fmin(dot(-unit_direction, rec.normal), 1.0);
    sin_theta: flt64 = sqrt(1.0 - cos_theta * cos_theta);

    cannot_refract: bool = ri * sin_theta > 1.0;
    direction: vec3;

    if (cannot_refract || reflectance(cos_theta, ri) > random())
        direction = reflect(unit_direction, rec.normal);
    else
        direction = refract(unit_direction, rec.normal, ri);

    scattered = ray(rec.p, direction, r_in.t);
    ret true;
}

@scatter:material(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    if (me!type == 'L') ret ([lambertian*]me)!scatter(r_in, rec, attenuation, scattered);
    if (me!type == 'M') ret ([metal*]me)!scatter(r_in, rec, attenuation, scattered);
    if (me!type == 'D') ret ([dielectric*]me)!scatter(r_in, rec, attenuation, scattered);
    ret false;
}
