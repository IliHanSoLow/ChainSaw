def material;

def hit_record {
    p: point3,
    normal: vec3,
    mat: material*,
    t: flt64,
    front_face: bool
}

@set_face_normal:hit_record(r: ray, outward_normal: vec3): void {
    ## Sets the hit record normal vector.
    ## NOTE: the parameter `outward_normal` is assumed to have unit length.

    me!front_face = dot(r.direction, outward_normal) < 0;
    me!normal = me!front_face ? outward_normal : -outward_normal;
}

@dump:hit_record:void = printf("%p: p=[%f, %f, %f] normal=[%f, %f, %f] mat=%p, t=%f front_face=%c\n", me, me!p.x, me!p.y, me!p.z, me!normal.x, me!normal.y, me!normal.z, me!mat, me!t, me!front_face ? '1' : '0');

def hittable {
    type: int8
}

def sphere;
def hittable_list;
@hit:sphere(r: ray, rec: hit_record*): bool;
@hit:hittable_list(r: ray, rec: hit_record*): bool;

@hit:hittable(r: ray, rec: hit_record*): bool {
    if (me!type == 'S') ret ([sphere*]me)!hit(r, rec);
    if (me!type == 'L') ret ([hittable_list*]me)!hit(r, rec);
    printf("%c\n", me!type);
    ret false;
}
