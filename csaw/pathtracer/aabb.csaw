def aabb {
    x: interval,
    y: interval,
    z: interval
}

@aabb(x: interval, y: interval, z: interval) {
    me!x = x;
    me!y = y;
    me!z = z;
}

@aabb(a: point3, b: point3) {
    me!x = (a.x <= b.x) ? interval(a.x, b.x) : interval(b.x, a.x);
    me!y = (a.y <= b.y) ? interval(a.y, b.y) : interval(b.y, a.y);
    me!z = (a.z <= b.z) ? interval(a.z, b.z) : interval(b.z, a.z);
}

@aabb(box1: aabb, box2: aabb) {
    me!x = interval(box1.x, box2.x);
    me!y = interval(box1.y, box2.y);
    me!z = interval(box1.z, box2.z);
}

@aabb = *me = aabb(interval(), interval(), interval());

@axis_interval:aabb(n: int32): interval = (n == 0) ? me!x : (n == 1) ? me!y : (n == 2) ? me!z : interval();

@hit:aabb(r: ray, ray_t: interval): bool {
    ray_orig: point3 = r.origin;
    ray_dir:  vec3   = r.direction;

    for (axis: int32; axis < 3; ++axis) {
        ax: interval = me!axis_interval(axis);
        adinv: flt64 = 1 / ray_dir[axis];

        t0: flt64 = (ax.min - ray_orig[axis]) * adinv;
        t1: flt64 = (ax.max - ray_orig[axis]) * adinv;

        if (t0 < t1) {
            if (t0 > ray_t.min) ray_t.min = t0;
            if (t1 < ray_t.max) ray_t.max = t1;
        } else {
            if (t1 > ray_t.min) ray_t.min = t1;
            if (t0 < ray_t.max) ray_t.max = t0;
        }

        if (ray_t.max <= ray_t.min)
            ret false;
    }

    ret true;
}

@longest_axis:aabb:int32 = (me!x.size() > me!y.size()) ? ((me!x.size() > me!z.size()) ? 0 : 2) : ((me!y.size() > me!z.size()) ? 1 : 2);
