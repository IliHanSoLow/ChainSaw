\inc "math"
\inc "stdbool"
\inc "stdio"

\inc "color"
\inc "common"
\inc "hittable"
\inc "material"
\inc "ray"
\inc "vec3"

@lambertian(albedo: color) {
    me!type = 'L';
    me!albedo = albedo;
}

@scatter:lambertian(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    scatter_direction: vec3 = rec.normal + random_unit_vector();

    ## Catch degenerate scatter direction
    if (scatter_direction.near_zero())
        scatter_direction = rec.normal;

    *scattered = ray(rec.p, scatter_direction, r_in.time);
    *attenuation = me!albedo;
    ret true;
}

@metal(albedo: color, fuzz: flt64) {
    me!type = 'M';
    me!albedo = albedo;
    me!fuzz = fuzz < 1 ? fuzz : 1;
}

@scatter:metal(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    reflected: vec3 = reflect(r_in.direction, rec.normal);
    reflected = unit_vector(reflected) + (me!fuzz * random_unit_vector());
    *scattered = ray(rec.p, reflected, r_in.time);
    *attenuation = me!albedo;
    ret dot(scattered!direction, rec.normal) > 0;
}

@dielectric(refraction_index: flt64) {
    me!type = 'D';
    me!refraction_index = refraction_index;
}

@reflectance(cosine: flt64, refraction_index: flt64): flt64 {
    ## Use Schlick's approximation for reflectance.
    r0: flt64 = (1 - refraction_index) / (1 + refraction_index);
    r0 *= r0;
    ret r0 + (1 - r0) * pow(1 - cosine, 5.0);
}

@scatter:dielectric(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    *attenuation = vec3(1.0, 1.0, 1.0);
    ri: flt64 = me!refraction_index;
    if (rec.front_face) ri = 1 / ri;

    unit_direction: vec3 = unit_vector(r_in.direction);
    cos_theta: flt64 = fmin(dot(-unit_direction, rec.normal), 1);
    sin_theta: flt64 = sqrt(1 - cos_theta * cos_theta);

    cannot_refract: bool = ri * sin_theta > 1;
    direction: vec3;

    if (cannot_refract || reflectance(cos_theta, ri) > random())
        direction = reflect(unit_direction, rec.normal);
    else
        direction = refract(unit_direction, rec.normal, ri);

    *scattered = ray(rec.p, direction, r_in.time);
    ret true;
}

@scatter:material(r_in: ray, rec: hit_record, attenuation: color*, scattered: ray*): bool {
    if (me!type == 'L') ret ([lambertian*]me)!scatter(r_in, rec, attenuation, scattered);
    if (me!type == 'M') ret ([metal*]me)!scatter(r_in, rec, attenuation, scattered);
    if (me!type == 'D') ret ([dielectric*]me)!scatter(r_in, rec, attenuation, scattered);
    printf("scatter:material %c\n", me!type);
    ret false;
}
