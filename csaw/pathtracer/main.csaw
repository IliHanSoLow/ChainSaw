\inc "defines.csaw"

@simple(filename: int8*) {
    world: hittable_list;

    material_ground: lambertian = lambertian(vec3(0.8, 0.8, 0.0));
    material_center: lambertian = lambertian(vec3(0.1, 0.2, 0.5));
    material_left: dielectric   = dielectric(1.50);
    material_bubble: dielectric = dielectric(1.00 / 1.50);
    material_right: metal       = metal(vec3(0.8, 0.6, 0.2), 1.0);

    world.add([hittable*]&sphere(vec3( 0.0, -100.5, -1.0), 100.0, [material*]&material_ground));
    world.add([hittable*]&sphere(vec3( 0.0,    0.0, -1.2),   0.5, [material*]&material_center));
    world.add([hittable*]&sphere(vec3(-1.0,    0.0, -1.0),   0.5, [material*]&material_left));
    world.add([hittable*]&sphere(vec3(-1.0,    0.0, -1.0),   0.4, [material*]&material_bubble));
    world.add([hittable*]&sphere(vec3( 1.0,    0.0, -1.0),   0.5, [material*]&material_right));

    cam: camera;
    cam.aspect_ratio = 16.0 / 9.0;
    cam.image_width = 400;
    cam.samples_per_pixel = 100;
    cam.max_depth = 50;

    cam.vfov = 20.0;
    cam.lookfrom = vec3(-2.0, 2.0, 1.0);
    cam.lookat = vec3(0.0, 0.0, -1.0);
    cam.vup = vec3(0.0, 1.0, 0.0);

    cam.defocus_angle = 10.0;
    cam.focus_dist = 3.4;

    cam.render(filename, [hittable*]&world);

    world.destroy();
}

@final(filename: int8*) {
    world: hittable_list;

    ground_material: lambertian = lambertian(vec3(0.5, 0.5, 0.5));
    world.add([hittable*]&sphere(vec3(0.0, -1000.0, 0.0), 1000.0, [material*]&ground_material));

    pointers: vector;

    for (a: int32 = -11; a < 11; ++a) {
        for (b: int32 = -11; b < 11; ++b) {
            choose_mat: flt64 = random();
            center: point3 = vec3(a + 0.9 * random(), 0.2, b + 0.9 * random());

            dc: vec3 = center - vec3(4.0, 0.2, 0.0);
            if (dc.length() > 0.9) {
                sp: sphere* = malloc([int64]41);
                sp!type = 'S';
                sp!center = center;
                sp!radius = 0.2;

                if (choose_mat < 0.8) {
                    ## diffuse
                    albedo: color = random_vec3() * random_vec3();
                    lmt: lambertian* = malloc([int64]25);
                    lmt = lambertian(albedo);
                    sp!mat = lmt;
                    pointers.push_back([void*]lmt);
                } else if (choose_mat < 0.95) {
                    ## metal
                    albedo: color = random_vec3(0.5, 1.0);
                    fuzz: flt64 = random(0.0, 0.5);
                    mmt: metal* = malloc([int64]33);
                    mmt = metal(albedo, fuzz);
                    sp!mat = mmt;
                    pointers.push_back([void*]mmt);
                } else {
                    ## glass
                    dmt: dielectric* = malloc([int64]9);
                    dmt = dielectric(1.5);
                    sp!mat = dmt;
                    pointers.push_back([void*]dmt);
                }

                pointers.push_back([void*]sp);
                world.add([hittable*]sp);
            }
        }
    }

    material1: dielectric = dielectric(1.5);
    world.add([hittable*]&sphere(vec3(0.0, 1.0, 0.0), 1.0, [material*]&material1));

    material2: lambertian = lambertian(vec3(0.4, 0.2, 0.1));
    world.add([hittable*]&sphere(vec3(-4.0, 1.0, 0.0), 1.0, [material*]&material2));

    material3: metal = metal(vec3(0.7, 0.6, 0.5), 0.0);
    world.add([hittable*]&sphere(vec3(4.0, 1.0, 0.0), 1.0, [material*]&material3));

    cam: camera;

    cam.aspect_ratio      = 16.0 / 9.0;
    cam.image_width       = 1200;
    cam.samples_per_pixel = 500;
    cam.max_depth         = 50;

    cam.vfov     = 20.0;
    cam.lookfrom = vec3(13.0, 2.0, 3.0);
    cam.lookat   = vec3(0.0, 0.0, 0.0);
    cam.vup      = vec3(0.0, 1.0, 0.0);

    cam.defocus_angle = 0.6;
    cam.focus_dist    = 10.0;

    cam.render(filename, [hittable*]&world);

    world.destroy();

    #for (i: int64; i < pointers.size; ++i) {
        ptr: void* = pointers[i];
        printf("%p (%c)\n", ptr, *([int8*]ptr));
        free(ptr);
    }# ## TODO: fix cleanup of allocated pointers
    pointers.destroy();
}

## MAIN
@main(argc: int32, ppArgv: int8**): int32 {

    for (a: int32; a < argc; ++a)
        printf("#%-3d: %s\n", a, ppArgv[a]);

    if (argc != 2)
        ret 1;

    filename: int8* = ppArgv[1];
    final(filename);

    ret 0;
}
